{% comment %}
  Custom Shopify page template for Printful product customization
  File: templates/page.printful-catalog.liquid
{% endcomment %}

<div class="printful-catalog-container">
  <div class="catalog-header">
    <h1>Customize Your Products</h1>
    <p>Select a product to start customizing with our design tool</p>
  </div>

  <!-- Loading State -->
  <div id="catalog-loading" class="loading-state">
    <div class="spinner"></div>
    <p>Loading available products...</p>
  </div>

  <!-- Error State -->
  <div id="catalog-error" class="error-state" style="display: none;">
    <div class="error-message">
      <h3>Unable to load products</h3>
      <p id="error-text"></p>
      <button id="retry-btn" class="btn btn-primary">Try Again</button>
    </div>
  </div>

  <!-- Product Grid -->
  <div id="product-grid" class="product-grid" style="display: none;">
    <!-- Products will be dynamically inserted here -->
  </div>

  <!-- Product Selection Modal -->
  <div id="product-modal" class="modal" style="display: none;">
    <div class="modal-content">
      <div class="modal-header">
        <h3 id="modal-product-name"></h3>
        <span class="close">&times;</span>
      </div>
      <div class="modal-body">
        <div class="product-details">
          <img id="modal-product-image" src="" alt="" />
          <div class="product-info">
            <p id="modal-product-description"></p>
            <div class="variant-selector">
              <h4>Available Options:</h4>
              <div id="variant-list"></div>
            </div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button id="customize-btn" class="btn btn-primary">Start Customizing</button>
        <button id="cancel-btn" class="btn btn-secondary">Cancel</button>
      </div>
    </div>
  </div>
</div>

<style>
/* Catalog Container Styles */
.printful-catalog-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

.catalog-header {
  text-align: center;
  margin-bottom: 40px;
}

.catalog-header h1 {
  font-size: 2.5rem;
  color: #333;
  margin-bottom: 10px;
}

.catalog-header p {
  font-size: 1.5rem;
  color: #666;
}

/* Loading State */
.loading-state {
  text-align: center;
  padding: 60px 20px;
}

.spinner {
  border: 4px solid #f3f3f3;
  border-top: 4px solid #007bff;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
  margin: 0 auto 20px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Error State */
.error-state {
  text-align: center;
  padding: 60px 20px;
}

.error-message h3 {
  color: #dc3545;
  margin-bottom: 10px;
}

.error-message p {
  color: #666;
  margin-bottom: 20px;
}

/* Product Grid */
.product-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 24px;
  margin-top: 30px;
}

.product-card {
  border: 1px solid #e0e0e0;
  border-radius: 12px;
  padding: 20px;
  text-align: center;
  transition: all 0.3s ease;
  cursor: pointer;
  background: white;
}

.product-card:hover {
  border-color: #007bff;
  box-shadow: 0 4px 12px rgba(0, 123, 255, 0.1);
  transform: translateY(-2px);
}

.product-card img {
  width: 100%;
  max-width: 200px;
  height: 200px;
  object-fit: cover;
  border-radius: 8px;
  margin-bottom: 15px;
}

.product-card h3 {
  font-size: 1.7rem;
  margin-bottom: 8px;
  color: #333;
}

.product-card p {
  color: #666;
  font-size: 1.2rem;
  margin-bottom: 15px;
}

.product-badge {
  display: inline-block;
  background: #28a745;
  color: white;
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 0.8rem;
  margin-bottom: 10px;
}

/* Modal Styles */
.modal {
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0,0,0,0.5);

  /* Flexbox centering */
  display: flex;
  align-items: center;
  justify-content: center;
}

.modal-content {
  background-color: white;
  padding: 0;
  border-radius: 12px;
  width: 90%;
  max-width: 1200px;
  max-height: 90vh;
  overflow-y: auto;
}


.modal-header {
  padding: 20px 30px;
  border-bottom: 1px solid #e0e0e0;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.modal-header h3 {
  margin: 0;
  color: #333;
}

.close {
  font-size: 28px;
  font-weight: bold;
  cursor: pointer;
  color: #999;
}

.close:hover {
  color: #333;
}

.modal-body {
  padding: 30px;
}

.product-details {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 30px;
  align-items: start;
}

.product-details img {
  width: 100%;
  border-radius: 8px;
}

.variant-selector h4 {
  margin-bottom: 15px;
  color: #333;
}

.variant-item {
  padding: 10px;
  border: 1px solid #e0e0e0;
  border-radius: 6px;
  margin-bottom: 8px;
  font-size: 1.2rem;
}

.modal-footer {
  padding: 20px 30px;
  border-top: 1px solid #e0e0e0;
  display: flex;
  gap: 10px;
  justify-content: flex-end;
}

/* Button Styles */
.btn {
  padding: 12px 24px;
  border: none;
  border-radius: 6px;
  font-size: 1.7rem;
  cursor: pointer;
  transition: all 0.3s ease;
  text-decoration: none;
  display: inline-block;
}

.btn-primary {
  background-color: #007bff;
  color: white;
}

.btn-primary:hover {
  background-color: #0056b3;
}

.btn-secondary {
  background-color: #6c757d;
  color: white;
}

.btn-secondary:hover {
  background-color: #545b62;
}

/* Responsive Design */
@media (max-width: 768px) {
  .product-grid {
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 16px;
  }
  
  .product-details {
    grid-template-columns: 1fr;
    gap: 20px;
  }
  
  .modal-content {
    margin: 2% auto;
    width: 95%;
  }
  
  .catalog-header h1 {
    font-size: 2rem;
  }
}
</style>

<script>
class PrintfulCatalogManager {
  constructor() {
    this.apiKey = 'Dp9ymUPQcPagNWHzq9Vv2qSFQwpfZ5x927cN3Ir9'; // Set this in theme settings
    this.baseUrl = 'https://customizer-app-backend.vercel.app/api/printful'; // Updated proxied base URL
    this.products = [];
    this.selectedProduct = null;
    this.paging = null;
    this.links = null;
    
    this.init();
  }

  init() {
    this.bindEvents();
    this.loadCatalog();
  }

  bindEvents() {
    // Existing event handlers...
    
    // Retry button
    document.getElementById('retry-btn')?.addEventListener('click', () => {
      this.loadCatalog();
    });

    // Modal close events
    document.querySelector('.close')?.addEventListener('click', () => {
      this.closeModal();
    });

    document.getElementById('cancel-btn')?.addEventListener('click', () => {
      this.closeModal();
    });

    // Customize button
    document.getElementById('customize-btn')?.addEventListener('click', () => {
      this.startCustomization();
    });

    // Close modal when clicking outside
    window.addEventListener('click', (e) => {
      const modal = document.getElementById('product-modal');
      if (e.target === modal) {
        this.closeModal();
      }
    });
  }

  async loadCatalog(path = '/v2/catalog-products') {
    try {
      this.showLoading();
      
      const response = await this.fetchWithFallback(path);
      
      console.log('Loaded products:', response);
      this.products = response.data;
      this.paging = response.paging;
      this.links = response._links;
        
      this.renderProducts();
      this.renderPagination();
    } catch (error) {
      console.error('Catalog loading error:', error);
      this.showError(error.message);
    }
  }

  async fetchWithFallback(path) {
    try {
      // Ensure path starts with a slash
      if (path && !path.startsWith('/')) {
        path = '/' + path;
      }
      
      // If path is a full URL, extract just the path portion
      if (path && path.startsWith('http')) {
        const url = new URL(path);
        path = url.pathname.replace('/api/printful', '') + url.search;
      }
      
      const endpoint = `${this.baseUrl}${path}`;
      console.log('Fetching from:', endpoint);
      
      const response = await fetch(endpoint, {
        method: 'GET'
      });

      const result = await response.json();
      console.log('Fetched catalog data:', result);
      return result;
    } catch (error) {
      console.warn('API fetch error:', error);
      // Return mock data or throw error
      throw error;
    }
  }

  showLoading() {
    document.getElementById('catalog-loading').style.display = 'block';
    document.getElementById('catalog-error').style.display = 'none';
    document.getElementById('product-grid').style.display = 'none';
  }

  showError(message) {
    document.getElementById('catalog-loading').style.display = 'none';
    document.getElementById('catalog-error').style.display = 'block';
    document.getElementById('product-grid').style.display = 'none';
    document.getElementById('error-text').textContent = message;
  }

  renderProducts() {
    const grid = document.getElementById('product-grid');
    const loading = document.getElementById('catalog-loading');
    const error = document.getElementById('catalog-error');

    loading.style.display = 'none';
    error.style.display = 'none';
    grid.style.display = 'grid';

    if (this.products.length === 0) {
      grid.innerHTML = '<div class="no-products">No products found</div>';
      return;
    }

    grid.innerHTML = this.products.map(product => `
      <div class="product-card" data-product-id="${product.id}">
        <img src="${product.image}" alt="${product.name}" loading="lazy" />
        <h3>${product.name}</h3>
        <p><strong>Brand:</strong> ${product.brand} | <strong>Model:</strong> ${product.model}</p>
        <p><strong>Variants:</strong> ${product.variant_count}</p>
      </div>
    `).join('');

    // Add click handlers
    grid.querySelectorAll('.product-card').forEach(card => {
      card.addEventListener('click', (e) => {
        const productId = parseInt(e.currentTarget.dataset.productId);
        this.showProductDetails(productId);
      });
    });
  }

  renderPagination() {
    // Check if we have a container for pagination
    let paginationContainer = document.getElementById('pagination-container');
    
    // Create the container if it doesn't exist
    if (!paginationContainer) {
      paginationContainer = document.createElement('div');
      paginationContainer.id = 'pagination-container';
      paginationContainer.className = 'pagination';
      
      // Append after the product grid
      const productGrid = document.getElementById('product-grid');
      productGrid.parentNode.insertBefore(paginationContainer, productGrid.nextSibling);
    }
    
    // Clear existing pagination
    paginationContainer.innerHTML = '';
    
    if (!this.links) return;
    
    // Create pagination buttons based on available links
    const buttons = [];
    
    // First page button
    if (this.links.first) {
      buttons.push(this.createPaginationButton('«', this.links.first.href, 'Go to first page'));
    }
    
    // Previous page button (we need to calculate this)
    if (this.paging && this.paging.offset > 0) {
      const prevOffset = Math.max(0, this.paging.offset - this.paging.limit);
      const prevPath = `/v2/catalog-products?limit=${this.paging.limit}&offset=${prevOffset}`;
      buttons.push(this.createPaginationButton('‹', prevPath, 'Go to previous page'));
    }
    
    // Current page indicator
    if (this.paging) {
      const currentPage = Math.floor(this.paging.offset / this.paging.limit) + 1;
      const totalPages = Math.ceil(this.paging.total / this.paging.limit);
      
      const pageInfo = document.createElement('span');
      pageInfo.className = 'pagination-info';
      pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;
      buttons.push(pageInfo);
    }
    
    // Next page button
    if (this.links.next) {
      buttons.push(this.createPaginationButton('›', this.links.next.href, 'Go to next page'));
    }
    
    // Last page button
    if (this.links.last) {
      buttons.push(this.createPaginationButton('»', this.links.last.href, 'Go to last page'));
    }
    
    // Add all buttons to pagination container
    buttons.forEach(button => paginationContainer.appendChild(button));
  }
  
  createPaginationButton(text, url, title) {
    const button = document.createElement('button');
    button.className = 'pagination-button';
    button.textContent = text;
    button.title = title;
    button.setAttribute('data-url', url);
    
    button.addEventListener('click', () => {
      this.loadCatalog(url);
    });
    
    return button;
  }

  showProductDetails(productId) {
    const product = this.products.find(p => p.id === productId);
    if (!product) return;

    this.selectedProduct = product;

    // Populate modal
    document.getElementById('modal-product-name').textContent = product.name;
    document.getElementById('modal-product-image').src = product.image;
    document.getElementById('modal-product-image').alt = product.name;
    document.getElementById('modal-product-description').innerHTML = `
      <p><strong>Description:</strong> ${product.description ? product.description.replace(/\n/g, '<br>') : 'No description available'}</p>
      <p><strong>Brand:</strong> ${product.brand}</p>
      <p><strong>Model:</strong> ${product.model}</p>
      <p><strong>Available Variants:</strong> ${product.variant_count}</p>
    `;

    // Show techniques options
    const variantList = document.getElementById('variant-list');
    if (product.techniques && product.techniques.length > 0) {
      variantList.innerHTML = product.techniques.map(option => `
        <div class="variant-item">
          <strong>${option.display_name}</strong>
        </div>
      `).join('');
    } else {
      variantList.innerHTML = '<div class="variant-item">Standard product sizes available</div>';
    }

    // Show modal
    document.getElementById('product-modal').style.display = 'flex';
  }

  closeModal() {
    document.getElementById('product-modal').style.display = 'none';
    this.selectedProduct = null;
  }

  startCustomization() {
    if (!this.selectedProduct) return;

    // Store selected product data
    sessionStorage.setItem('printful_selected_product', JSON.stringify(this.selectedProduct));

    // Redirect to customization page or trigger next step
    // This would typically navigate to the EDM integration
    console.log('Starting customization for product:', this.selectedProduct);
    
    // For now, show an alert - replace with actual customization flow
    alert(`Starting customization for: ${this.selectedProduct.name}\n\nNext step: Initialize Printful EDM for product ID ${this.selectedProduct.id}`);
    
    this.closeModal();
  }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  new PrintfulCatalogManager();
});
</script>